{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"Pytorch_HW_2.ipynb\"","provenance":[{"file_id":"1x43bgHzKpFvTIRSD7GdxzQnDSlvDnX_I","timestamp":1615530603564}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qIjfReZsFvVv","executionInfo":{"status":"ok","timestamp":1614789654598,"user_tz":-180,"elapsed":780,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"652e07cc-674f-408d-9c13-9ecff9da94a4"},"source":["from google.colab import drive\r\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hGMCZ7dMGs32"},"source":["import pandas as pd\r\n","import numpy as np\r\n","from zipfile import ZipFile\r\n","\r\n","import torch\r\n","import torchvision\r\n","from torch import nn, optim\r\n","from torchvision import datasets, transforms\r\n","from torch.utils.data import DataLoader, Dataset\r\n","\r\n","import time\r\n","import math\r\n","\r\n","import matplotlib.pyplot as plt\r\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9nO3pxoxo1on","executionInfo":{"status":"ok","timestamp":1614789655863,"user_tz":-180,"elapsed":2025,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"acdd37fb-ffae-4e7d-8a72-94bb9ef9c505"},"source":["use_cuda = torch.cuda.is_available()\r\n","# device = torch.device(\"cpu\")\r\n","device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\r\n","print(device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["cuda\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"d9EWhfzRqEHC"},"source":["### 1. Генерация базы данных на 10 классов движения"]},{"cell_type":"code","metadata":{"id":"lgxEU2hbHA3X"},"source":["PATH = '/content/drive/My Drive/app/PyTorch/Lesson_2_LSTM/'\r\n","TRAIN_DATASET_PATH = PATH + 'nturgbd_skeletons_s001_to_s017.zip'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XgQ8KTUf7Wsd"},"source":["data_path = ''\r\n","#### список отсутсвующих элементов так же будет доступен \r\n","broken_files_path = PATH + 'NTU_RGBD_samples_with_missing_skeletons.txt'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UxmyWKFy7xDW"},"source":["training_subjects = list(range(0, 28)) #количество людей выполняющих действия\r\n","#классы которые будем использовать для обучения, полный список прдставлен тут https://github.com/shahroudy/NTURGB-D\r\n","training_classes = [8, 12, 21, 22, 24, 25, 27, 33, 43, 52]\r\n","training_cameras = [1, 2, 3] \r\n","\r\n","max_body_true = 1\r\n","max_body_kinect = 1\r\n","\r\n","num_joint = 25\r\n","max_frame = 300 # Длина отрезка которую мы вычленяем из большого датасета"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mywtZ0Oj7xLA"},"source":["def read_data(data_path, broken_files_path):\r\n","  labels = []\r\n","  files = []\r\n","  action_classes = {}\r\n","  counter = 0\r\n","  files_counter = {}\r\n","                \r\n","  with open(broken_files_path, 'r') as f:\r\n","      broken_files = f.read().split(\"\\n\")\r\n","\r\n","  archive = ZipFile(TRAIN_DATASET_PATH, 'r')\r\n","  num_frames = 0\r\n","\r\n","  for name in archive.namelist():\r\n","    filename = name.split('/')[1].split('.')[0]\r\n","    if filename not in broken_files:\r\n","      action_class = int(filename[filename.find('A') + 1:filename.find('A') + 4])\r\n","      subject_id = int(filename[filename.find('P') + 1:filename.find('P') + 4])\r\n","      camera_id = int(filename[filename.find('C') + 1:filename.find('C') + 4])\r\n","      if action_class in training_classes and camera_id in training_cameras:  #and subject_id in training_subjects:\r\n","        if action_class in action_classes:\r\n","          if files_counter[action_class] < 120:\r\n","            file = archive.extract(name)\r\n","            files.append([file, action_classes[action_class]])\r\n","\r\n","            files_counter[action_class] = files_counter[action_class] + 1\r\n","        else:\r\n","          action_classes.update({action_class : counter})\r\n","          files_counter.update({action_class : 1})\r\n","          counter+=1\r\n","          file = archive.extract(name)\r\n","          files.append([file, action_classes[action_class]])\r\n","  #       labels.append([action_class])\r\n","  print(\"action classes: \", action_classes)\r\n","  print(\"action files: \", files_counter)\r\n","      \r\n","  return files, action_classes"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P6wzkU0ehwC_"},"source":["def get_nonzero_std(s): \r\n","    index = s.sum(-1).sum(-1) != 0  \r\n","    s = s[index]\r\n","    if len(s) != 0:\r\n","        s = s[:, :, 0].std() + s[:, :, 1].std() + s[:, :, 2].std()  \r\n","    else:\r\n","        s = 0\r\n","    return s\r\n","\r\n","# Функция фильтр для того, что бы найти только координаты x,y,z(т.к. в датасете\r\n","# хранится на порядок больше информации, нежели только координаты x,y,z)\r\n","# (Остальные данные нам и не нужны, т.к. у нас нет ик-камер)\r\n","def read_skeleton_filter(file):\r\n","    with open(file, 'r') as f:\r\n","        skeleton_sequence = {}\r\n","        skeleton_sequence['numFrame'] = int(f.readline())\r\n","        skeleton_sequence['frameInfo'] = []\r\n","        for t in range(skeleton_sequence['numFrame']):\r\n","            frame_info = {}\r\n","            frame_info['numBody'] = int(f.readline())\r\n","            frame_info['bodyInfo'] = []\r\n","\r\n","            for m in range(frame_info['numBody']):\r\n","                body_info = {}\r\n","                body_info_key = [\r\n","                    'bodyID', 'clipedEdges', 'handLeftConfidence',\r\n","                    'handLeftState', 'handRightConfidence', 'handRightState',\r\n","                    'isResticted', 'leanX', 'leanY', 'trackingState'\r\n","                ]\r\n","                body_info = {\r\n","                    k: float(v)\r\n","                    for k, v in zip(body_info_key, f.readline().split())\r\n","                }\r\n","                body_info['numJoint'] = int(f.readline())\r\n","                body_info['jointInfo'] = []\r\n","                for v in range(body_info['numJoint']):\r\n","                    joint_info_key = [\r\n","                        'x', 'y', 'z', 'depthX', 'depthY', 'colorX', 'colorY',\r\n","                        'orientationW', 'orientationX', 'orientationY',\r\n","                        'orientationZ', 'trackingState'\r\n","                    ]\r\n","                    joint_info = {\r\n","                        k: float(v)\r\n","                        for k, v in zip(joint_info_key, f.readline().split())\r\n","                    }\r\n","                    body_info['jointInfo'].append(joint_info)\r\n","                frame_info['bodyInfo'].append(body_info)\r\n","            skeleton_sequence['frameInfo'].append(frame_info)\r\n","\r\n","    return skeleton_sequence\r\n","\r\n","def read_xyz(file, max_body=1, num_joint=25):\r\n","    seq_info = read_skeleton_filter(file)\r\n","    data = np.zeros((max_body, seq_info['numFrame'], num_joint, 3))\r\n","    for n, f in enumerate(seq_info['frameInfo']):\r\n","        for m, b in enumerate(f['bodyInfo']):\r\n","            for j, v in enumerate(b['jointInfo']):\r\n","                if m < max_body and j < num_joint:\r\n","                    data[m, n, j, :] = [v['x'], v['y'], v['z']]\r\n","\r\n","                else:\r\n","                    pass\r\n","\r\n","    return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BZynbVBUZMqy"},"source":["def create_coords_blocks(test_file, chonk_len):   \r\n","    frame_counter = 0\r\n","    new_labels = []\r\n","    new_frames = []\r\n","    blocks = []\r\n","    \r\n","    test_frames = read_xyz(data_path + test_file[0])[0]\r\n","    label = test_file[1]\r\n","    slice_len = chonk_len * int(len(test_frames)/chonk_len)\r\n","\r\n","\r\n","    for index in range(len(test_frames[:slice_len])):\r\n","        frame_counter += 1\r\n","        new_frames.append(test_frames[index].flatten())\r\n","        if frame_counter == chonk_len:\r\n","            frame_counter = 0\r\n","            blocks.append(np.array(new_frames))\r\n","            new_labels = new_labels + [label]\r\n","            new_frames = []\r\n","       \r\n","            \r\n","    return blocks, new_labels"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"apmXXSsTZ4aL","executionInfo":{"status":"ok","timestamp":1614789660117,"user_tz":-180,"elapsed":6223,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"3a7786b8-2bd8-46eb-db31-ab6e111fea8d"},"source":["##### список файлов с лейблами на каждый файл \r\n","working_files_with_labels, action_classes = read_data(data_path, broken_files_path)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["action classes:  {25: 0, 33: 1, 22: 2, 24: 3, 43: 4, 21: 5, 52: 6, 27: 7, 8: 8, 12: 9}\n","action files:  {25: 120, 33: 120, 22: 120, 24: 120, 43: 120, 21: 120, 52: 120, 27: 120, 8: 120, 12: 120}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kn4jGH_oaRZp"},"source":["LABELS = {v: k for k, v in action_classes.items()}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N1jR_CpRaV2-","executionInfo":{"status":"ok","timestamp":1614789660119,"user_tz":-180,"elapsed":6205,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"7c98f640-d99d-447a-bf54-41cd8b7d7a82"},"source":["len(working_files_with_labels)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1200"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"QQ1OtfsLe-TF"},"source":["def get_test_data(chonk_len=45):\r\n","  data = []\r\n","  labels = []\r\n","  ##########################################################################\r\n","  numbers = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0} ###\r\n","  ##########################################################################\r\n","  for file in working_files_with_labels:\r\n","      frames_blocks, label = create_coords_blocks(file, chonk_len)\r\n","      if label != [] and numbers[label[0]] <= 150:\r\n","          numbers[label[0]] = numbers[label[0]] + len(label)\r\n","          data = data + frames_blocks\r\n","          labels = labels + label\r\n","  data_np = np.asarray(data)\r\n","  labels_np = np.asarray(labels)\r\n","\r\n","  data_sq = data_np.reshape(len(data_np), -1)\r\n","  test_data = pd.DataFrame(data_sq)\r\n","  test_labels = pd.DataFrame(labels_np)\r\n","  test_data['labels'] = test_labels\r\n","\r\n","  return test_data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":172},"id":"lpng7mbgeo4G","executionInfo":{"status":"ok","timestamp":1614789676304,"user_tz":-180,"elapsed":22367,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"3a77fd5f-e108-4e5b-8744-be7e76bf06dd"},"source":["test_data = get_test_data()\r\n","print(test_data.shape)\r\n","test_data.head(2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1308, 3376)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","      <th>24</th>\n","      <th>25</th>\n","      <th>26</th>\n","      <th>27</th>\n","      <th>28</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","      <th>39</th>\n","      <th>...</th>\n","      <th>3336</th>\n","      <th>3337</th>\n","      <th>3338</th>\n","      <th>3339</th>\n","      <th>3340</th>\n","      <th>3341</th>\n","      <th>3342</th>\n","      <th>3343</th>\n","      <th>3344</th>\n","      <th>3345</th>\n","      <th>3346</th>\n","      <th>3347</th>\n","      <th>3348</th>\n","      <th>3349</th>\n","      <th>3350</th>\n","      <th>3351</th>\n","      <th>3352</th>\n","      <th>3353</th>\n","      <th>3354</th>\n","      <th>3355</th>\n","      <th>3356</th>\n","      <th>3357</th>\n","      <th>3358</th>\n","      <th>3359</th>\n","      <th>3360</th>\n","      <th>3361</th>\n","      <th>3362</th>\n","      <th>3363</th>\n","      <th>3364</th>\n","      <th>3365</th>\n","      <th>3366</th>\n","      <th>3367</th>\n","      <th>3368</th>\n","      <th>3369</th>\n","      <th>3370</th>\n","      <th>3371</th>\n","      <th>3372</th>\n","      <th>3373</th>\n","      <th>3374</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.543514</td>\n","      <td>0.006456</td>\n","      <td>2.219983</td>\n","      <td>-0.590447</td>\n","      <td>0.309427</td>\n","      <td>2.203886</td>\n","      <td>-0.632050</td>\n","      <td>0.603073</td>\n","      <td>2.176135</td>\n","      <td>-0.670979</td>\n","      <td>0.714393</td>\n","      <td>2.228561</td>\n","      <td>-0.768814</td>\n","      <td>0.460935</td>\n","      <td>2.243171</td>\n","      <td>-0.788788</td>\n","      <td>0.238303</td>\n","      <td>2.176094</td>\n","      <td>-0.793843</td>\n","      <td>0.046145</td>\n","      <td>2.096334</td>\n","      <td>-0.799663</td>\n","      <td>0.021884</td>\n","      <td>2.086610</td>\n","      <td>-0.551960</td>\n","      <td>0.448146</td>\n","      <td>2.026984</td>\n","      <td>-0.524307</td>\n","      <td>0.209351</td>\n","      <td>1.960709</td>\n","      <td>-0.602406</td>\n","      <td>0.016217</td>\n","      <td>1.987939</td>\n","      <td>-0.650869</td>\n","      <td>-0.001337</td>\n","      <td>2.010213</td>\n","      <td>-0.574923</td>\n","      <td>0.010401</td>\n","      <td>2.206921</td>\n","      <td>-0.553566</td>\n","      <td>...</td>\n","      <td>-0.661427</td>\n","      <td>0.014768</td>\n","      <td>2.162715</td>\n","      <td>-0.710902</td>\n","      <td>-0.251928</td>\n","      <td>2.017175</td>\n","      <td>-0.650725</td>\n","      <td>-0.645799</td>\n","      <td>2.165629</td>\n","      <td>-0.701561</td>\n","      <td>-0.685854</td>\n","      <td>2.053417</td>\n","      <td>-0.566649</td>\n","      <td>0.004857</td>\n","      <td>2.106514</td>\n","      <td>-0.575388</td>\n","      <td>-0.359746</td>\n","      <td>2.037796</td>\n","      <td>-0.524115</td>\n","      <td>-0.794215</td>\n","      <td>2.015873</td>\n","      <td>-0.557974</td>\n","      <td>-0.863832</td>\n","      <td>2.007917</td>\n","      <td>-0.708040</td>\n","      <td>0.505875</td>\n","      <td>2.164704</td>\n","      <td>-0.780816</td>\n","      <td>0.001417</td>\n","      <td>2.168809</td>\n","      <td>-0.789179</td>\n","      <td>0.004355</td>\n","      <td>2.162333</td>\n","      <td>-0.660319</td>\n","      <td>-0.168059</td>\n","      <td>2.000252</td>\n","      <td>-0.569021</td>\n","      <td>-0.108486</td>\n","      <td>1.931455</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.623339</td>\n","      <td>0.007472</td>\n","      <td>2.157067</td>\n","      <td>-0.671111</td>\n","      <td>0.295646</td>\n","      <td>2.162996</td>\n","      <td>-0.722639</td>\n","      <td>0.574388</td>\n","      <td>2.156539</td>\n","      <td>-0.751166</td>\n","      <td>0.673262</td>\n","      <td>2.181089</td>\n","      <td>-0.859071</td>\n","      <td>0.432318</td>\n","      <td>2.223515</td>\n","      <td>-0.659932</td>\n","      <td>0.354446</td>\n","      <td>2.365777</td>\n","      <td>-0.733263</td>\n","      <td>0.135753</td>\n","      <td>2.235361</td>\n","      <td>-0.746252</td>\n","      <td>0.071337</td>\n","      <td>2.262258</td>\n","      <td>-0.579494</td>\n","      <td>0.445118</td>\n","      <td>2.011273</td>\n","      <td>-0.649774</td>\n","      <td>0.241318</td>\n","      <td>1.953964</td>\n","      <td>-0.637904</td>\n","      <td>-0.019948</td>\n","      <td>1.940712</td>\n","      <td>-0.616918</td>\n","      <td>-0.098047</td>\n","      <td>1.962469</td>\n","      <td>-0.660932</td>\n","      <td>0.011522</td>\n","      <td>2.143659</td>\n","      <td>-0.713434</td>\n","      <td>...</td>\n","      <td>-0.712275</td>\n","      <td>0.007571</td>\n","      <td>2.156869</td>\n","      <td>-0.592694</td>\n","      <td>-0.338679</td>\n","      <td>2.169277</td>\n","      <td>-0.506192</td>\n","      <td>-0.855663</td>\n","      <td>2.248294</td>\n","      <td>-0.608715</td>\n","      <td>-0.885547</td>\n","      <td>2.163712</td>\n","      <td>-0.631519</td>\n","      <td>0.004626</td>\n","      <td>2.090807</td>\n","      <td>-0.592322</td>\n","      <td>-0.359951</td>\n","      <td>2.029603</td>\n","      <td>-0.528926</td>\n","      <td>-0.796994</td>\n","      <td>2.020210</td>\n","      <td>-0.565106</td>\n","      <td>-0.867030</td>\n","      <td>1.971971</td>\n","      <td>-0.714278</td>\n","      <td>0.526233</td>\n","      <td>2.146616</td>\n","      <td>-0.749302</td>\n","      <td>0.049592</td>\n","      <td>2.086310</td>\n","      <td>-0.758865</td>\n","      <td>0.050991</td>\n","      <td>2.085750</td>\n","      <td>-0.642084</td>\n","      <td>-0.182520</td>\n","      <td>1.960002</td>\n","      <td>-0.574899</td>\n","      <td>-0.114097</td>\n","      <td>1.918045</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2 rows × 3376 columns</p>\n","</div>"],"text/plain":["          0         1         2         3  ...      3372      3373      3374  labels\n","0 -0.543514  0.006456  2.219983 -0.590447  ... -0.569021 -0.108486  1.931455       0\n","1 -0.623339  0.007472  2.157067 -0.671111  ... -0.574899 -0.114097  1.918045       0\n","\n","[2 rows x 3376 columns]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tyDWkVG0mSEt","executionInfo":{"status":"ok","timestamp":1614789676306,"user_tz":-180,"elapsed":22358,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"1b6c17df-85be-4f42-e715-cb458070c5bd"},"source":["test_data.labels.value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9    153\n","0    152\n","8    140\n","5    139\n","2    132\n","3    120\n","1    120\n","4    119\n","7    117\n","6    116\n","Name: labels, dtype: int64"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"AfFhU3tMdSIj"},"source":["test_data.to_csv(\"skeletons_classes_1_10.csv\", index = False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RHgV7i3fqcEp"},"source":["### 2. Подготовка данных"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5Tc0hggsjga","executionInfo":{"status":"ok","timestamp":1614789681154,"user_tz":-180,"elapsed":27190,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"2d22815c-a9db-4c45-d622-69e72cfa1a36"},"source":["LABELS"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 25, 1: 33, 2: 22, 3: 24, 4: 43, 5: 21, 6: 52, 7: 27, 8: 8, 9: 12}"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"8bKWH_JHsnFK"},"source":["LABELS = {0: 'reach into pocket',        #25\r\n","          1: 'check time (from watch)',  #33\r\n","          2: 'cheer up',                 #22\r\n","          3: 'kicking something',        #24 \r\n","          4: 'falling',                  #43 \r\n","          5: 'take off a hat/cap',       #21\r\n","          6: 'pushing other person',     #52\r\n","          7: 'jump up',                  #27\r\n","          8: 'sitting down',             #8\r\n","          9: 'writing',                  #12\r\n","          }"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BQxVaeXAvbk8"},"source":["class Test_Dataset(Dataset):\r\n","    def __init__(self):\r\n","        self.samples = list(range(0, 100)) ##генерируем случайные данные\r\n","        # Все подготовления данных происходят в инициализации:\r\n","        # - разделение данных на train/test/ validate\r\n","        # - аугментация (трансформация) данных \r\n","        # - чтние аннотаций\r\n","        # - считывание по индексу\r\n","        # - Применяет выбранные трансформации к данным\r\n","\r\n","    def __len__(self):\r\n","        # # Возвращает данные и лейблы\r\n","       \r\n","        # - отправление данных на гпу\r\n","        # - лучше возвращать данные как тензор или словарь\r\n","        # - Применяет выбранные трансформации к данным\r\n","        return len(self.samples) #возвращаем данные\r\n","\r\n","    def __getitem__(self, idx):\r\n","        return (self.samples[idx], label) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vHIA7NyavxFf"},"source":["class Skeleton_Dataset(Dataset):\r\n","    def __init__(self, file_path, transform=None, split_dim=45):\r\n","        self.data = pd.read_csv(file_path)\r\n","        self.transform = transform\r\n","        self.labels = self.data.iloc[:,-1]\r\n","        self.split_dim = split_dim\r\n","\r\n","\r\n","    def __len__(self):\r\n","        return len(self.data) \r\n","    \r\n","    \r\n","    def __getitem__(self, idx):\r\n","        item = np.asarray(self.data.iloc[idx,:-1]).reshape(self.split_dim, 25*3) #45 кадров, 25 точек, 3 координаты (xyz)\r\n","        label = self.labels[idx]\r\n","        if self.transform != None:\r\n","            item = transform(item) \r\n","\r\n","        return (item, label) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mRmb70etwZ7i"},"source":["dataset = Skeleton_Dataset(file_path = 'skeletons_classes_1_10.csv', transform=None)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CwwcaZ2uwtUW"},"source":["skel, lab = dataset.__getitem__(41)\r\n","skel, lab = dataset[41]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"2mu7Tt5owz39","executionInfo":{"status":"ok","timestamp":1614789682140,"user_tz":-180,"elapsed":28106,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"27ece80d-f84f-4aea-c71c-51afcf770195"},"source":["LABELS[lab]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'take off a hat/cap'"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"88KIQ_S8xP13","executionInfo":{"status":"ok","timestamp":1614789682142,"user_tz":-180,"elapsed":28101,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"7480e491-3de7-461b-a1d6-8bd1dfa1a025"},"source":["skel.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45, 75)"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q6jcyfTsxVJu","executionInfo":{"status":"ok","timestamp":1614789682143,"user_tz":-180,"elapsed":28095,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"0b8415c1-cc8e-4048-9dc6-27d0de934d5c"},"source":["skels_for_draw = skel.reshape(-1, 25, 3)\r\n","skels_for_draw.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45, 25, 3)"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPKbfTNqxY2Y","executionInfo":{"status":"ok","timestamp":1614789682144,"user_tz":-180,"elapsed":28090,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"81adaefc-7c88-4707-e93c-bd498cbbb9a2"},"source":["dataset.__len__()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1308"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"ixEf_d-BPOkA"},"source":["### 3. Обучение базовой модели (2 LSTM модуля, 45 кадров)"]},{"cell_type":"code","metadata":{"id":"aRu-Vs2G2J_N"},"source":["def get_train_test_loader(n):\r\n","  test_data = get_test_data(n)\r\n","  print(test_data.shape)\r\n","  test_data.to_csv(\"skeletons_classes_1_10.csv\", index = False)\r\n","\r\n","  dataset = Skeleton_Dataset(file_path='skeletons_classes_1_10.csv', transform=None, split_dim=n)\r\n","\r\n","  t = int(0.75 * len(dataset))\r\n","  train_dataset, test_dataset = torch.utils.data.random_split(dataset, [t, len(dataset) - t])\r\n","  train_loader = DataLoader(train_dataset, batch_size = 16, shuffle=True)\r\n","  test_loader = DataLoader(test_dataset, batch_size = 1)  \r\n","\r\n","  return train_loader, test_loader"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TUeHgWU05EQk"},"source":["class LSTM_net(nn.Module):\r\n","    def __init__(self, input_dim, hidden_dim, output_dim, layer_num):\r\n","        super().__init__()\r\n","        self.hidden_dim = hidden_dim\r\n","        self.output_dim = output_dim\r\n","        self.lstm = torch.nn.LSTM(input_dim, hidden_dim,layer_num,batch_first=True)\r\n","        self.dr = torch.nn.Dropout2d(0.1)\r\n","        self.fc = torch.nn.Linear(hidden_dim,output_dim)\r\n","        \r\n","        \r\n","    def forward(self, inputs):\r\n","        x = inputs\r\n","        lstm_out,(hn,cn) = self.lstm(x)\r\n","        out = self.fc(lstm_out[:,-1,:])\r\n","        return out"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IUjtz01KorYp"},"source":["def categoryFromOutput(output):\r\n","    top_n, top_i = output.topk(1)\r\n","    category_i = top_i[0].item()\r\n","#   print(output.topk(5))\r\n","    return LABELS[category_i], category_i\r\n","\r\n","\r\n","def timeSince(since):\r\n","    now = time.time()\r\n","    s = now - since\r\n","    m = math.floor(s / 60)\r\n","    s -= m * 60\r\n","    return '%dm %ds' % (m, s)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q3jbKH3E0fu-"},"source":["def run_model():\r\n","  criterion = nn.CrossEntropyLoss()  \r\n","  optimizer = optim.SGD(rnn.parameters(), lr=0.0007, momentum=0.9)\r\n","\r\n","  all_losses = []\r\n","  start = time.time()\r\n","  counter = 0\r\n","  for epoch in range(600):  \r\n","      current_loss = 0\r\n","      running_loss = 0.0\r\n","      for i, data in enumerate(train_loader, 0):\r\n","          \r\n","          inputs, labels = data[0].to(device), data[1].to(device)\r\n","          optimizer.zero_grad()\r\n","      \r\n","          output = rnn(inputs.float())\r\n","          loss = criterion(output, labels)\r\n","          loss.backward()\r\n","          optimizer.step() \r\n","\r\n","\r\n","          current_loss += loss.item()\r\n","          category = LABELS[int(labels[0])]\r\n","\r\n","          if counter % 500 == 0:\r\n","              guess, guess_i = categoryFromOutput(output)\r\n","              correct = '✓' if guess == category else '✗ (%s)' % category\r\n","              print('epoch : %d iter : %d (%s) %.4f  / %s %s' % (\r\n","                  epoch, i, timeSince(start), loss, guess, correct)\r\n","              )\r\n","          \r\n","          counter = counter + 1\r\n","      if counter % 100 == 0:\r\n","          all_losses.append(current_loss / 25)\r\n","          current_loss = 0\r\n","\r\n","  return rnn, all_losses"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u1ougEOD5PXA"},"source":["def get_accuracy(rnn):\r\n","  total = 0\r\n","  right = 0\r\n","  counter = 0\r\n","\r\n","  rnn.eval()\r\n","  with torch.no_grad():\r\n","      for i, data in enumerate(test_loader, 0):\r\n","          counter = counter + 1\r\n","          inputs, labels = data[0].to(device), data[1].to(device)  \r\n","          output = rnn(inputs.float())\r\n","          guess, guess_i = categoryFromOutput(output)\r\n","          category = LABELS[int(labels[0])]\r\n","          \r\n","          if guess == category:\r\n","              right = right + 1\r\n","\r\n","\r\n","  print('Accuracy of the network: ',  (100 * right / counter))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bmN6pIyJ3U_q","executionInfo":{"status":"ok","timestamp":1614789703452,"user_tz":-180,"elapsed":49358,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"39281ea2-50da-49d7-f94d-0af1153d2230"},"source":["n = 45\r\n","train_loader, test_loader = get_train_test_loader(n)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1308, 3376)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TPBNA21027fE","executionInfo":{"status":"ok","timestamp":1614789706416,"user_tz":-180,"elapsed":52314,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"8a83d504-b9b6-4682-9a6f-1259dc16f25a"},"source":["n_joints = 25*3\r\n","n_hidden = 128\r\n","n_categories = len(LABELS)\r\n","n_layer = 2\r\n","\r\n","rnn = LSTM_net(n_joints, n_hidden, n_categories, n_layer)\r\n","rnn.to(device)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LSTM_net(\n","  (lstm): LSTM(75, 128, num_layers=2, batch_first=True)\n","  (dr): Dropout2d(p=0.1, inplace=False)\n","  (fc): Linear(in_features=128, out_features=10, bias=True)\n",")"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zWKNlGzC4UHc","executionInfo":{"status":"ok","timestamp":1614790934846,"user_tz":-180,"elapsed":1280738,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"1647bfde-9937-44cc-f0fd-6cf99c92672f"},"source":["rnn, all_losses = run_model()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 0 iter : 0 (0m 0s) 2.2953  / check time (from watch) ✗ (kicking something)\n","epoch : 8 iter : 4 (0m 16s) 2.2898  / writing ✗ (pushing other person)\n","epoch : 16 iter : 8 (0m 34s) 2.2441  / sitting down ✓\n","epoch : 24 iter : 12 (0m 51s) 1.9276  / cheer up ✓\n","epoch : 32 iter : 16 (1m 7s) 1.8153  / reach into pocket ✓\n","epoch : 40 iter : 20 (1m 24s) 1.6020  / reach into pocket ✗ (jump up)\n","epoch : 48 iter : 24 (1m 40s) 1.8753  / reach into pocket ✗ (kicking something)\n","epoch : 56 iter : 28 (1m 57s) 1.5206  / writing ✓\n","epoch : 64 iter : 32 (2m 14s) 1.4476  / falling ✓\n","epoch : 72 iter : 36 (2m 30s) 1.5965  / falling ✗ (sitting down)\n","epoch : 80 iter : 40 (2m 46s) 1.0634  / writing ✗ (sitting down)\n","epoch : 88 iter : 44 (3m 3s) 1.5128  / falling ✓\n","epoch : 96 iter : 48 (3m 20s) 1.2319  / sitting down ✓\n","epoch : 104 iter : 52 (3m 36s) 1.3590  / reach into pocket ✗ (check time (from watch))\n","epoch : 112 iter : 56 (3m 53s) 1.1353  / cheer up ✓\n","epoch : 120 iter : 60 (4m 10s) 1.0563  / kicking something ✗ (sitting down)\n","epoch : 129 iter : 2 (4m 26s) 1.3392  / kicking something ✗ (writing)\n","epoch : 137 iter : 6 (4m 43s) 1.0264  / jump up ✓\n","epoch : 145 iter : 10 (4m 59s) 1.3308  / falling ✓\n","epoch : 153 iter : 14 (5m 16s) 1.0351  / writing ✗ (sitting down)\n","epoch : 161 iter : 18 (5m 32s) 1.0043  / kicking something ✗ (pushing other person)\n","epoch : 169 iter : 22 (5m 49s) 1.1840  / kicking something ✗ (reach into pocket)\n","epoch : 177 iter : 26 (6m 5s) 1.0677  / take off a hat/cap ✓\n","epoch : 185 iter : 30 (6m 22s) 1.0491  / reach into pocket ✗ (pushing other person)\n","epoch : 193 iter : 34 (6m 39s) 2.1398  / take off a hat/cap ✗ (jump up)\n","epoch : 201 iter : 38 (6m 55s) 1.4965  / writing ✓\n","epoch : 209 iter : 42 (7m 11s) 1.0404  / jump up ✓\n","epoch : 217 iter : 46 (7m 28s) 1.0590  / reach into pocket ✓\n","epoch : 225 iter : 50 (7m 44s) 0.8607  / cheer up ✓\n","epoch : 233 iter : 54 (8m 1s) 0.5226  / falling ✓\n","epoch : 241 iter : 58 (8m 17s) 0.6391  / jump up ✓\n","epoch : 250 iter : 0 (8m 34s) 0.8718  / reach into pocket ✗ (pushing other person)\n","epoch : 258 iter : 4 (8m 50s) 0.6136  / cheer up ✓\n","epoch : 266 iter : 8 (9m 7s) 0.4573  / check time (from watch) ✓\n","epoch : 274 iter : 12 (9m 23s) 1.4479  / kicking something ✓\n","epoch : 282 iter : 16 (9m 39s) 1.3786  / cheer up ✗ (reach into pocket)\n","epoch : 290 iter : 20 (9m 56s) 0.7811  / take off a hat/cap ✗ (check time (from watch))\n","epoch : 298 iter : 24 (10m 12s) 0.1946  / sitting down ✓\n","epoch : 306 iter : 28 (10m 29s) 0.4290  / sitting down ✓\n","epoch : 314 iter : 32 (10m 45s) 0.5628  / pushing other person ✗ (falling)\n","epoch : 322 iter : 36 (11m 2s) 0.1626  / writing ✓\n","epoch : 330 iter : 40 (11m 18s) 0.3244  / pushing other person ✓\n","epoch : 338 iter : 44 (11m 35s) 0.2094  / take off a hat/cap ✓\n","epoch : 346 iter : 48 (11m 51s) 0.2077  / take off a hat/cap ✓\n","epoch : 354 iter : 52 (12m 8s) 0.1802  / check time (from watch) ✓\n","epoch : 362 iter : 56 (12m 24s) 1.1287  / falling ✓\n","epoch : 370 iter : 60 (12m 41s) 0.2866  / take off a hat/cap ✓\n","epoch : 379 iter : 2 (12m 57s) 0.1704  / pushing other person ✓\n","epoch : 387 iter : 6 (13m 13s) 0.1254  / jump up ✓\n","epoch : 395 iter : 10 (13m 30s) 0.1191  / take off a hat/cap ✓\n","epoch : 403 iter : 14 (13m 46s) 0.2125  / pushing other person ✓\n","epoch : 411 iter : 18 (14m 3s) 1.4112  / sitting down ✓\n","epoch : 419 iter : 22 (14m 19s) 0.1189  / pushing other person ✓\n","epoch : 427 iter : 26 (14m 36s) 0.2438  / writing ✓\n","epoch : 435 iter : 30 (14m 52s) 0.0801  / pushing other person ✓\n","epoch : 443 iter : 34 (15m 8s) 0.2170  / pushing other person ✓\n","epoch : 451 iter : 38 (15m 25s) 0.1228  / sitting down ✓\n","epoch : 459 iter : 42 (15m 41s) 0.0806  / sitting down ✓\n","epoch : 467 iter : 46 (15m 58s) 1.8223  / check time (from watch) ✗ (writing)\n","epoch : 475 iter : 50 (16m 14s) 0.0556  / sitting down ✓\n","epoch : 483 iter : 54 (16m 31s) 0.8738  / cheer up ✓\n","epoch : 491 iter : 58 (16m 47s) 0.0555  / take off a hat/cap ✓\n","epoch : 500 iter : 0 (17m 4s) 0.0099  / writing ✓\n","epoch : 508 iter : 4 (17m 20s) 0.0223  / reach into pocket ✓\n","epoch : 516 iter : 8 (17m 37s) 0.0239  / sitting down ✓\n","epoch : 524 iter : 12 (17m 53s) 0.0531  / cheer up ✓\n","epoch : 532 iter : 16 (18m 9s) 0.0065  / pushing other person ✓\n","epoch : 540 iter : 20 (18m 26s) 0.0071  / falling ✓\n","epoch : 548 iter : 24 (18m 42s) 0.0087  / jump up ✓\n","epoch : 556 iter : 28 (18m 59s) 0.0078  / writing ✓\n","epoch : 564 iter : 32 (19m 15s) 0.0055  / falling ✓\n","epoch : 572 iter : 36 (19m 32s) 0.0062  / pushing other person ✓\n","epoch : 580 iter : 40 (19m 48s) 0.0053  / writing ✓\n","epoch : 588 iter : 44 (20m 5s) 0.0044  / pushing other person ✓\n","epoch : 596 iter : 48 (20m 21s) 0.0030  / reach into pocket ✓\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"p5kVIUBm-VU2","executionInfo":{"status":"ok","timestamp":1614790934854,"user_tz":-180,"elapsed":1280740,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"2a949b4c-e741-4781-b6ed-5e755950661e"},"source":["plt.plot(list(range(0, len(all_losses))), all_losses)\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ot5O-DTd-XCC","executionInfo":{"status":"ok","timestamp":1614790936231,"user_tz":-180,"elapsed":1282111,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"391f7fe2-15cc-4320-8bf0-25dfa5a7461e"},"source":["get_accuracy(rnn)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy of the network:  73.08868501529052\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6ASaS216QHbm"},"source":["**Вывод:** accuracy базовой модели с 2 модулями и 45 кадрами составляет 73.09"]},{"cell_type":"markdown","metadata":{"id":"LGHEuMgmOx6-"},"source":["### 4. Базовая модель с 3 LSTM модулями"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zlbkKFsMQ9U8","executionInfo":{"status":"ok","timestamp":1614790936233,"user_tz":-180,"elapsed":1282106,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"44f8800c-e6cf-4284-9237-bad26c2a424c"},"source":["n_layer = 3\r\n","rnn = LSTM_net(n_joints, n_hidden, n_categories, n_layer)\r\n","rnn.to(device)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LSTM_net(\n","  (lstm): LSTM(75, 128, num_layers=3, batch_first=True)\n","  (dr): Dropout2d(p=0.1, inplace=False)\n","  (fc): Linear(in_features=128, out_features=10, bias=True)\n",")"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5xZz_OxhROMO","executionInfo":{"status":"ok","timestamp":1614792213232,"user_tz":-180,"elapsed":2559097,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"6ce94371-32ba-4c1f-970d-4c43b3ad5453"},"source":["rnn, all_losses = run_model()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 0 iter : 0 (0m 0s) 2.2914  / falling ✗ (check time (from watch))\n","epoch : 8 iter : 4 (0m 17s) 2.3088  / reach into pocket ✗ (pushing other person)\n","epoch : 16 iter : 8 (0m 34s) 2.2953  / writing ✗ (pushing other person)\n","epoch : 24 iter : 12 (0m 52s) 2.2502  / writing ✗ (falling)\n","epoch : 32 iter : 16 (1m 9s) 2.2677  / reach into pocket ✓\n","epoch : 40 iter : 20 (1m 27s) 2.2930  / reach into pocket ✗ (pushing other person)\n","epoch : 48 iter : 24 (1m 44s) 2.2726  / reach into pocket ✗ (pushing other person)\n","epoch : 56 iter : 28 (2m 1s) 2.0366  / take off a hat/cap ✗ (kicking something)\n","epoch : 64 iter : 32 (2m 19s) 2.1547  / falling ✗ (kicking something)\n","epoch : 72 iter : 36 (2m 36s) 2.0092  / reach into pocket ✓\n","epoch : 80 iter : 40 (2m 53s) 2.0740  / take off a hat/cap ✓\n","epoch : 88 iter : 44 (3m 10s) 1.8690  / falling ✗ (sitting down)\n","epoch : 96 iter : 48 (3m 27s) 1.8171  / reach into pocket ✗ (jump up)\n","epoch : 104 iter : 52 (3m 44s) 1.9772  / cheer up ✗ (writing)\n","epoch : 112 iter : 56 (4m 1s) 1.5733  / reach into pocket ✗ (jump up)\n","epoch : 120 iter : 60 (4m 18s) 1.6990  / take off a hat/cap ✗ (cheer up)\n","epoch : 129 iter : 2 (4m 36s) 1.3577  / cheer up ✓\n","epoch : 137 iter : 6 (4m 53s) 1.3376  / kicking something ✗ (jump up)\n","epoch : 145 iter : 10 (5m 10s) 1.3559  / writing ✓\n","epoch : 153 iter : 14 (5m 27s) 1.5186  / falling ✓\n","epoch : 161 iter : 18 (5m 44s) 1.9659  / take off a hat/cap ✗ (check time (from watch))\n","epoch : 169 iter : 22 (6m 1s) 2.0281  / take off a hat/cap ✓\n","epoch : 177 iter : 26 (6m 19s) 1.6588  / writing ✗ (check time (from watch))\n","epoch : 185 iter : 30 (6m 36s) 1.4666  / writing ✓\n","epoch : 193 iter : 34 (6m 53s) 1.3466  / falling ✓\n","epoch : 201 iter : 38 (7m 10s) 1.1437  / cheer up ✓\n","epoch : 209 iter : 42 (7m 27s) 1.6012  / reach into pocket ✗ (check time (from watch))\n","epoch : 217 iter : 46 (7m 44s) 1.5557  / sitting down ✓\n","epoch : 225 iter : 50 (8m 1s) 1.3328  / sitting down ✗ (kicking something)\n","epoch : 233 iter : 54 (8m 18s) 0.9852  / jump up ✓\n","epoch : 241 iter : 58 (8m 35s) 1.1477  / sitting down ✗ (take off a hat/cap)\n","epoch : 250 iter : 0 (8m 52s) 1.0188  / reach into pocket ✗ (kicking something)\n","epoch : 258 iter : 4 (9m 9s) 1.2711  / take off a hat/cap ✓\n","epoch : 266 iter : 8 (9m 26s) 0.6731  / take off a hat/cap ✓\n","epoch : 274 iter : 12 (9m 43s) 0.9375  / kicking something ✓\n","epoch : 282 iter : 16 (10m 0s) 0.7716  / writing ✓\n","epoch : 290 iter : 20 (10m 18s) 0.7661  / take off a hat/cap ✗ (check time (from watch))\n","epoch : 298 iter : 24 (10m 35s) 0.6427  / kicking something ✓\n","epoch : 306 iter : 28 (10m 52s) 1.1096  / writing ✗ (reach into pocket)\n","epoch : 314 iter : 32 (11m 9s) 0.8108  / falling ✓\n","epoch : 322 iter : 36 (11m 26s) 0.6632  / cheer up ✓\n","epoch : 330 iter : 40 (11m 43s) 0.8511  / kicking something ✗ (reach into pocket)\n","epoch : 338 iter : 44 (12m 1s) 0.8924  / jump up ✓\n","epoch : 346 iter : 48 (12m 17s) 0.5421  / writing ✓\n","epoch : 354 iter : 52 (12m 35s) 0.5562  / falling ✓\n","epoch : 362 iter : 56 (12m 52s) 0.6153  / take off a hat/cap ✗ (reach into pocket)\n","epoch : 370 iter : 60 (13m 9s) 0.5334  / pushing other person ✓\n","epoch : 379 iter : 2 (13m 26s) 0.6913  / reach into pocket ✗ (pushing other person)\n","epoch : 387 iter : 6 (13m 44s) 1.1027  / writing ✗ (check time (from watch))\n","epoch : 395 iter : 10 (14m 1s) 0.3469  / kicking something ✓\n","epoch : 403 iter : 14 (14m 19s) 0.3673  / jump up ✓\n","epoch : 411 iter : 18 (14m 36s) 0.3162  / falling ✓\n","epoch : 419 iter : 22 (14m 53s) 0.7394  / take off a hat/cap ✓\n","epoch : 427 iter : 26 (15m 10s) 0.4941  / sitting down ✓\n","epoch : 435 iter : 30 (15m 27s) 0.3556  / pushing other person ✓\n","epoch : 443 iter : 34 (15m 44s) 0.3087  / falling ✓\n","epoch : 451 iter : 38 (16m 2s) 0.6444  / kicking something ✓\n","epoch : 459 iter : 42 (16m 19s) 0.7715  / pushing other person ✓\n","epoch : 467 iter : 46 (16m 36s) 0.6834  / sitting down ✓\n","epoch : 475 iter : 50 (16m 53s) 0.1337  / kicking something ✓\n","epoch : 483 iter : 54 (17m 10s) 0.1206  / cheer up ✓\n","epoch : 491 iter : 58 (17m 27s) 0.4624  / writing ✗ (check time (from watch))\n","epoch : 500 iter : 0 (17m 45s) 0.2072  / jump up ✓\n","epoch : 508 iter : 4 (18m 2s) 0.1700  / reach into pocket ✓\n","epoch : 516 iter : 8 (18m 19s) 0.2827  / sitting down ✓\n","epoch : 524 iter : 12 (18m 36s) 0.4775  / check time (from watch) ✓\n","epoch : 532 iter : 16 (18m 53s) 0.2247  / cheer up ✓\n","epoch : 540 iter : 20 (19m 10s) 0.1579  / check time (from watch) ✓\n","epoch : 548 iter : 24 (19m 27s) 0.1301  / writing ✓\n","epoch : 556 iter : 28 (19m 44s) 0.3431  / kicking something ✓\n","epoch : 564 iter : 32 (20m 1s) 0.1924  / cheer up ✓\n","epoch : 572 iter : 36 (20m 19s) 0.1171  / reach into pocket ✓\n","epoch : 580 iter : 40 (20m 36s) 0.1732  / check time (from watch) ✓\n","epoch : 588 iter : 44 (20m 53s) 0.7275  / pushing other person ✓\n","epoch : 596 iter : 48 (21m 10s) 0.0536  / take off a hat/cap ✓\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"xUdwR0V3R22t","executionInfo":{"status":"ok","timestamp":1614792213258,"user_tz":-180,"elapsed":2559116,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"0ac15346-9591-4eac-a0f3-a782e31943a2"},"source":["plt.plot(list(range(0, len(all_losses))),all_losses)\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0b-2AU-iSDal","executionInfo":{"status":"ok","timestamp":1614792214596,"user_tz":-180,"elapsed":2560448,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"311b564b-d113-497e-e8fc-d3ba432e9e0e"},"source":["get_accuracy(rnn)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy of the network:  71.55963302752293\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aVGxGaZpWmOI"},"source":["**Вывод:** С увеличением числа модулей в базовой модели с 2 до 3 результат немного ухудшился. Accuracy упала с 73.09 до 71.56"]},{"cell_type":"markdown","metadata":{"id":"eAyAHaQDTxHk"},"source":["### 5. Изменение количества “кадров” в серии датасета"]},{"cell_type":"markdown","metadata":{"id":"rpy8dU6DgzcN"},"source":["#### a) 30 кадров"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yPkWZCn2iIYO","executionInfo":{"status":"ok","timestamp":1614792234504,"user_tz":-180,"elapsed":2580349,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"85920b13-2724-414b-889f-b9564ec7aa23"},"source":["n = 30\r\n","train_loader, test_loader = get_train_test_loader(n)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1519, 2251)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KqMedz03ZU2g","executionInfo":{"status":"ok","timestamp":1614792234506,"user_tz":-180,"elapsed":2580344,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"37bd20e9-75df-45bd-fa2a-704291f65064"},"source":["rnn = LSTM_net(n_joints, n_hidden, n_categories, n_layer)\r\n","rnn.to(device)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LSTM_net(\n","  (lstm): LSTM(75, 128, num_layers=3, batch_first=True)\n","  (dr): Dropout2d(p=0.1, inplace=False)\n","  (fc): Linear(in_features=128, out_features=10, bias=True)\n",")"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8HVfuvMUaVdr","executionInfo":{"status":"ok","timestamp":1614793326688,"user_tz":-180,"elapsed":3672518,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"6fbc22bd-c6e2-4f50-bfdf-721241e2681e"},"source":["rnn, all_losses = run_model()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 0 iter : 0 (0m 0s) 2.3158  / sitting down ✗ (writing)\n","epoch : 6 iter : 68 (0m 13s) 2.2901  / reach into pocket ✗ (falling)\n","epoch : 13 iter : 64 (0m 26s) 2.2936  / reach into pocket ✗ (sitting down)\n","epoch : 20 iter : 60 (0m 39s) 2.2954  / reach into pocket ✓\n","epoch : 27 iter : 56 (0m 52s) 2.3074  / reach into pocket ✗ (kicking something)\n","epoch : 34 iter : 52 (1m 5s) 2.2775  / reach into pocket ✓\n","epoch : 41 iter : 48 (1m 18s) 2.2849  / reach into pocket ✓\n","epoch : 48 iter : 44 (1m 30s) 2.2860  / reach into pocket ✗ (check time (from watch))\n","epoch : 55 iter : 40 (1m 42s) 2.2741  / falling ✗ (check time (from watch))\n","epoch : 62 iter : 36 (1m 55s) 2.2678  / falling ✗ (take off a hat/cap)\n","epoch : 69 iter : 32 (2m 7s) 2.2024  / cheer up ✓\n","epoch : 76 iter : 28 (2m 20s) 1.9593  / cheer up ✗ (check time (from watch))\n","epoch : 83 iter : 24 (2m 32s) 1.9791  / reach into pocket ✓\n","epoch : 90 iter : 20 (2m 45s) 1.7963  / cheer up ✗ (take off a hat/cap)\n","epoch : 97 iter : 16 (2m 57s) 1.7559  / falling ✗ (sitting down)\n","epoch : 104 iter : 12 (3m 10s) 1.6513  / jump up ✓\n","epoch : 111 iter : 8 (3m 22s) 1.7932  / reach into pocket ✗ (pushing other person)\n","epoch : 118 iter : 4 (3m 35s) 1.4788  / falling ✗ (jump up)\n","epoch : 125 iter : 0 (3m 48s) 1.8579  / cheer up ✗ (take off a hat/cap)\n","epoch : 131 iter : 68 (4m 0s) 1.5532  / check time (from watch) ✗ (writing)\n","epoch : 138 iter : 64 (4m 13s) 1.3224  / writing ✗ (take off a hat/cap)\n","epoch : 145 iter : 60 (4m 25s) 1.6241  / sitting down ✗ (jump up)\n","epoch : 152 iter : 56 (4m 38s) 1.6115  / cheer up ✗ (take off a hat/cap)\n","epoch : 159 iter : 52 (4m 50s) 1.7411  / kicking something ✗ (sitting down)\n","epoch : 166 iter : 48 (5m 3s) 1.0541  / falling ✓\n","epoch : 173 iter : 44 (5m 15s) 1.1840  / falling ✓\n","epoch : 180 iter : 40 (5m 28s) 1.3565  / check time (from watch) ✗ (jump up)\n","epoch : 187 iter : 36 (5m 41s) 1.0353  / cheer up ✓\n","epoch : 194 iter : 32 (5m 53s) 1.4259  / cheer up ✓\n","epoch : 201 iter : 28 (6m 6s) 1.3638  / writing ✗ (pushing other person)\n","epoch : 208 iter : 24 (6m 18s) 1.1575  / check time (from watch) ✓\n","epoch : 215 iter : 20 (6m 31s) 1.5596  / jump up ✗ (kicking something)\n","epoch : 222 iter : 16 (6m 43s) 1.4306  / reach into pocket ✗ (jump up)\n","epoch : 229 iter : 12 (6m 56s) 1.3852  / jump up ✗ (pushing other person)\n","epoch : 236 iter : 8 (7m 9s) 0.9611  / kicking something ✓\n","epoch : 243 iter : 4 (7m 21s) 1.3656  / reach into pocket ✓\n","epoch : 250 iter : 0 (7m 34s) 1.5108  / check time (from watch) ✗ (writing)\n","epoch : 256 iter : 68 (7m 46s) 1.0615  / reach into pocket ✓\n","epoch : 263 iter : 64 (7m 59s) 1.0632  / pushing other person ✗ (falling)\n","epoch : 270 iter : 60 (8m 12s) 1.0186  / check time (from watch) ✓\n","epoch : 277 iter : 56 (8m 24s) 0.9373  / writing ✓\n","epoch : 284 iter : 52 (8m 37s) 0.7658  / cheer up ✓\n","epoch : 291 iter : 48 (8m 49s) 0.7702  / check time (from watch) ✓\n","epoch : 298 iter : 44 (9m 2s) 0.5738  / writing ✓\n","epoch : 305 iter : 40 (9m 15s) 0.5943  / jump up ✓\n","epoch : 312 iter : 36 (9m 27s) 0.5427  / check time (from watch) ✓\n","epoch : 319 iter : 32 (9m 39s) 0.5717  / falling ✓\n","epoch : 326 iter : 28 (9m 52s) 1.1655  / sitting down ✓\n","epoch : 333 iter : 24 (10m 5s) 0.3558  / kicking something ✗ (falling)\n","epoch : 340 iter : 20 (10m 17s) 0.1607  / take off a hat/cap ✓\n","epoch : 347 iter : 16 (10m 30s) 0.5731  / writing ✓\n","epoch : 354 iter : 12 (10m 42s) 0.3910  / jump up ✓\n","epoch : 361 iter : 8 (10m 55s) 0.2592  / kicking something ✓\n","epoch : 368 iter : 4 (11m 8s) 1.6266  / falling ✗ (sitting down)\n","epoch : 375 iter : 0 (11m 20s) 0.3249  / check time (from watch) ✓\n","epoch : 381 iter : 68 (11m 33s) 0.4251  / check time (from watch) ✓\n","epoch : 388 iter : 64 (11m 46s) 0.6924  / reach into pocket ✓\n","epoch : 395 iter : 60 (11m 58s) 0.4213  / pushing other person ✓\n","epoch : 402 iter : 56 (12m 11s) 0.1954  / kicking something ✓\n","epoch : 409 iter : 52 (12m 23s) 0.2238  / reach into pocket ✓\n","epoch : 416 iter : 48 (12m 36s) 0.0785  / check time (from watch) ✓\n","epoch : 423 iter : 44 (12m 49s) 0.0717  / jump up ✓\n","epoch : 430 iter : 40 (13m 1s) 0.1169  / take off a hat/cap ✓\n","epoch : 437 iter : 36 (13m 14s) 0.0716  / sitting down ✓\n","epoch : 444 iter : 32 (13m 26s) 0.2138  / cheer up ✓\n","epoch : 451 iter : 28 (13m 39s) 0.8857  / pushing other person ✓\n","epoch : 458 iter : 24 (13m 52s) 0.1326  / reach into pocket ✓\n","epoch : 465 iter : 20 (14m 5s) 0.0559  / kicking something ✓\n","epoch : 472 iter : 16 (14m 17s) 0.0868  / cheer up ✓\n","epoch : 479 iter : 12 (14m 30s) 1.0675  / reach into pocket ✗ (check time (from watch))\n","epoch : 486 iter : 8 (14m 43s) 0.0383  / kicking something ✓\n","epoch : 493 iter : 4 (14m 55s) 0.0101  / falling ✓\n","epoch : 500 iter : 0 (15m 8s) 0.0310  / pushing other person ✓\n","epoch : 506 iter : 68 (15m 21s) 0.0914  / writing ✓\n","epoch : 513 iter : 64 (15m 34s) 0.0322  / sitting down ✓\n","epoch : 520 iter : 60 (15m 46s) 0.0152  / reach into pocket ✓\n","epoch : 527 iter : 56 (15m 59s) 0.0078  / falling ✓\n","epoch : 534 iter : 52 (16m 12s) 0.0113  / check time (from watch) ✓\n","epoch : 541 iter : 48 (16m 25s) 0.0065  / check time (from watch) ✓\n","epoch : 548 iter : 44 (16m 38s) 0.0042  / cheer up ✓\n","epoch : 555 iter : 40 (16m 50s) 0.0070  / take off a hat/cap ✓\n","epoch : 562 iter : 36 (17m 3s) 0.0031  / pushing other person ✓\n","epoch : 569 iter : 32 (17m 16s) 0.0178  / writing ✓\n","epoch : 576 iter : 28 (17m 28s) 0.0054  / sitting down ✓\n","epoch : 583 iter : 24 (17m 41s) 0.0068  / cheer up ✓\n","epoch : 590 iter : 20 (17m 54s) 0.0050  / kicking something ✓\n","epoch : 597 iter : 16 (18m 7s) 0.0068  / writing ✓\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"uMEyYvOWncgU","executionInfo":{"status":"ok","timestamp":1614793326695,"user_tz":-180,"elapsed":3672519,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"b0ed3cf3-cd70-4607-849b-3818933113b8"},"source":["plt.plot(list(range(0, len(all_losses))),all_losses)\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JgAg2nWon4QC","executionInfo":{"status":"ok","timestamp":1614793327773,"user_tz":-180,"elapsed":3673590,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"1cad67d0-c84c-444f-fd45-c29ba06a1987"},"source":["get_accuracy(rnn)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy of the network:  62.63157894736842\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aK3DdMiLpvk_"},"source":["**Вывод:** С уменьшением количества \"кадров\" с 45 до 30 качество предсказания ухудшилось. Accuracy снизилась до 62.63"]},{"cell_type":"markdown","metadata":{"id":"qYJ5JbbcqUx9"},"source":["#### b) 60 кадров"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AuJtjV7joout","executionInfo":{"status":"ok","timestamp":1614794920977,"user_tz":-180,"elapsed":22012,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"35438762-4842-43f9-c6d8-88b9a7d8abd4"},"source":["n = 60\r\n","train_loader, test_loader = get_train_test_loader(n)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(952, 4501)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SEYWggPxo96k","executionInfo":{"status":"ok","timestamp":1614794920978,"user_tz":-180,"elapsed":20325,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"6fc33441-669c-4d27-ae4d-edf0dba17313"},"source":["rnn = LSTM_net(n_joints, n_hidden, n_categories, n_layer)\r\n","rnn.to(device)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LSTM_net(\n","  (lstm): LSTM(75, 128, num_layers=3, batch_first=True)\n","  (dr): Dropout2d(p=0.1, inplace=False)\n","  (fc): Linear(in_features=128, out_features=10, bias=True)\n",")"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kFg-kfxP1yJ8","executionInfo":{"status":"ok","timestamp":1614796111496,"user_tz":-180,"elapsed":1190505,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"1f767c62-408b-41f5-dafa-d5c6f707b229"},"source":["rnn, all_losses = run_model()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 0 iter : 0 (0m 0s) 2.3009  / pushing other person ✗ (take off a hat/cap)\n","epoch : 11 iter : 5 (0m 22s) 2.2888  / writing ✗ (sitting down)\n","epoch : 22 iter : 10 (0m 44s) 2.2706  / writing ✗ (check time (from watch))\n","epoch : 33 iter : 15 (1m 6s) 2.2176  / writing ✗ (jump up)\n","epoch : 44 iter : 20 (1m 29s) 2.2282  / writing ✗ (sitting down)\n","epoch : 55 iter : 25 (1m 51s) 2.2318  / writing ✗ (check time (from watch))\n","epoch : 66 iter : 30 (2m 13s) 2.1442  / writing ✗ (jump up)\n","epoch : 77 iter : 35 (2m 35s) 2.0440  / cheer up ✗ (take off a hat/cap)\n","epoch : 88 iter : 40 (2m 58s) 2.2880  / sitting down ✗ (writing)\n","epoch : 100 iter : 0 (3m 20s) 1.8561  / writing ✓\n","epoch : 111 iter : 5 (3m 42s) 1.9374  / falling ✓\n","epoch : 122 iter : 10 (4m 4s) 1.5892  / writing ✓\n","epoch : 133 iter : 15 (4m 26s) 1.6981  / sitting down ✗ (kicking something)\n","epoch : 144 iter : 20 (4m 48s) 1.7142  / sitting down ✗ (reach into pocket)\n","epoch : 155 iter : 25 (5m 10s) 1.4547  / reach into pocket ✗ (check time (from watch))\n","epoch : 166 iter : 30 (5m 32s) 1.4029  / writing ✗ (kicking something)\n","epoch : 177 iter : 35 (5m 54s) 1.4082  / sitting down ✗ (jump up)\n","epoch : 188 iter : 40 (6m 16s) 1.0335  / kicking something ✗ (reach into pocket)\n","epoch : 200 iter : 0 (6m 38s) 1.3131  / reach into pocket ✓\n","epoch : 211 iter : 5 (7m 0s) 1.2533  / writing ✓\n","epoch : 222 iter : 10 (7m 22s) 1.5190  / reach into pocket ✓\n","epoch : 233 iter : 15 (7m 44s) 1.4538  / cheer up ✓\n","epoch : 244 iter : 20 (8m 6s) 1.4767  / sitting down ✓\n","epoch : 255 iter : 25 (8m 28s) 1.6433  / take off a hat/cap ✗ (check time (from watch))\n","epoch : 266 iter : 30 (8m 50s) 1.1386  / sitting down ✓\n","epoch : 277 iter : 35 (9m 12s) 1.3667  / falling ✓\n","epoch : 288 iter : 40 (9m 34s) 0.9441  / check time (from watch) ✗ (pushing other person)\n","epoch : 300 iter : 0 (9m 56s) 1.9275  / falling ✓\n","epoch : 311 iter : 5 (10m 18s) 1.7870  / reach into pocket ✗ (kicking something)\n","epoch : 322 iter : 10 (10m 40s) 1.4138  / falling ✓\n","epoch : 333 iter : 15 (11m 1s) 1.5044  / jump up ✓\n","epoch : 344 iter : 20 (11m 23s) 1.4447  / writing ✗ (reach into pocket)\n","epoch : 355 iter : 25 (11m 45s) 1.8719  / take off a hat/cap ✗ (pushing other person)\n","epoch : 366 iter : 30 (12m 7s) 1.1160  / pushing other person ✓\n","epoch : 377 iter : 35 (12m 29s) 1.1356  / writing ✓\n","epoch : 388 iter : 40 (12m 51s) 1.5976  / take off a hat/cap ✗ (writing)\n","epoch : 400 iter : 0 (13m 14s) 1.0747  / writing ✗ (check time (from watch))\n","epoch : 411 iter : 5 (13m 36s) 1.0783  / writing ✓\n","epoch : 422 iter : 10 (13m 57s) 0.7800  / cheer up ✓\n","epoch : 433 iter : 15 (14m 19s) 1.0293  / take off a hat/cap ✓\n","epoch : 444 iter : 20 (14m 41s) 0.8238  / take off a hat/cap ✓\n","epoch : 455 iter : 25 (15m 3s) 0.4364  / falling ✓\n","epoch : 466 iter : 30 (15m 25s) 0.9652  / kicking something ✓\n","epoch : 477 iter : 35 (15m 47s) 1.4575  / cheer up ✓\n","epoch : 488 iter : 40 (16m 9s) 0.4324  / falling ✓\n","epoch : 500 iter : 0 (16m 31s) 0.4601  / sitting down ✓\n","epoch : 511 iter : 5 (16m 53s) 0.6263  / falling ✓\n","epoch : 522 iter : 10 (17m 15s) 0.2665  / take off a hat/cap ✓\n","epoch : 533 iter : 15 (17m 37s) 0.8957  / reach into pocket ✗ (kicking something)\n","epoch : 544 iter : 20 (17m 59s) 0.8763  / writing ✓\n","epoch : 555 iter : 25 (18m 21s) 0.7673  / jump up ✓\n","epoch : 566 iter : 30 (18m 43s) 0.5654  / reach into pocket ✓\n","epoch : 577 iter : 35 (19m 5s) 0.7224  / reach into pocket ✓\n","epoch : 588 iter : 40 (19m 27s) 0.2873  / sitting down ✓\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"aMU0UC3BrMA7","executionInfo":{"status":"ok","timestamp":1614796111504,"user_tz":-180,"elapsed":1190495,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"22a91a32-20ef-4189-b702-f51c93f97610"},"source":["plt.plot(list(range(0, len(all_losses))), all_losses)\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9BZHMIQ91hdg","executionInfo":{"status":"ok","timestamp":1614796112679,"user_tz":-180,"elapsed":1191659,"user":{"displayName":"Yanina Kutovaya","photoUrl":"","userId":"11432719385518429647"}},"outputId":"5859b83f-63d4-4b0e-ee1b-0d7b299e4cc7"},"source":["get_accuracy(rnn)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy of the network:  68.4873949579832\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZxLsnBolrNXx"},"source":["**Вывод:** С увеличением количества \"кадров\" с 45 до 60 accuracy снизилась до 68.48. Очевидно число \"кадров\" равное 45 и 2 LSTM модуля - оптимальные параметры для нашей модели."]}]}